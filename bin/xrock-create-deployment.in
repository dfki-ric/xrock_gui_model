#!@PYTHON_SHEBANG@

import argparse
import sys
import os
import shutil
import yaml

parser = argparse.ArgumentParser(description='Create deployment for given cnd file.')
parser.add_argument('-c', '--cnd_file', help="File to load", required=True)
parser.add_argument('-f', '--folder', help="Output folder for the deployment configuration", default='deployment')

args = None
try:
    args = parser.parse_args()
except SystemExit:
    sys.exit(1)


def makeDir(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        pass

filename = args.cnd_file
folder = args.folder

if not os.path.exists(filename):
    print("Error: given file not found: "+filename)
    exit(-1)

makeDir(folder)
target_file = os.path.join(folder, os.path.basename(filename))
#shutil.copyfile(filename, target_file)
project_name, ext = os.path.splitext(os.path.basename(filename))

with open(filename, "r") as f:
    cnd_model = yaml.safe_load(f.read())

# filter default deployments and connections
new_cnd_model = {}
new_cnd_model["tasks"] = {}
new_cnd_model["deployments"] = {}
for dname, deployment in cnd_model["deployments"].items():
    if not "orogen_default_" in deployment["process_name"]:
        new_cnd_model["deployments"][dname] = deployment
        # copy tasks of deployment to new model
        for key, value in deployment["taskList"].items():
            for task_name, task in cnd_model["tasks"].items():
                if task_name == key:
                    new_cnd_model["tasks"][task_name] = task
                    break

with open(target_file, "w") as f:
    f.write(yaml.dump(new_cnd_model))

with open(os.path.join(folder, "CMakeLists.txt"), "w") as f:
    f.write("cmake_minimum_required(VERSION 3.1)\n")
    f.write("project("+project_name+" VERSION 0.0)\n")
    f.write("\n")
    f.write("set(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/.orogen/config\")\n")
    f.write("include("+project_name+"Base)\n")
    f.write("\n")

with open(os.path.join(folder, "manifest.xml"), "w") as f:
    f.write("<package>\n")
    f.write("  <description brief=\"Autogenerated deployment named "+project_name+"\">\n")
    f.write("    This is an autogenerated deployment\n")
    f.write("  </description>\n")
    f.write("<author>AUTO-GENERATED</author>\n")
    f.write("<license></license>\n")
    # todo: add depending packages
    f.write("</package>\n")

with open(os.path.join(folder, project_name+".orogen"), "w") as f:
    f.write("require 'cnd_orogen'\n")
    f.write("\n")
    f.write("name '"+project_name+"'\n")
    f.write("cnd_model = ::CndOrogen.load_cnd_model('"+project_name+ext+"')\n")
    f.write("::CndOrogen.load_orogen_project_from_cnd(self, cnd_model)\n")

